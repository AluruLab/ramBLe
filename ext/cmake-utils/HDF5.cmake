#### HDF5
# function below performs find_package(HDF5) everytime cmake is called to capture any potential USE_MPI changes.
# the two critical cached variables are HDF5_C_COMPILER_EXECUTABLE (set tp h5pcc or h5cc) and HDF5_C_LIBRARY_hdf5 (possibly dependent on compiler.)
OPTION(USE_HDF5 "Build with HDF5 support" ON)
if (USE_HDF5)
  unset(HDF5_C_INCLUDE_DIRS CACHE)
  unset(HDF5_C_COMPILER_EXECUTABLE CACHE)
  unset(HDF5_C_LIBRARY_hdf5 CACHE)
  if (USE_MPI)
    set(HDF5_PREFER_PARALLEL ON)
    message(STATUS "outside changing HDF5 to use parallel: ${HDF5_PREFER_PARALLEL}")
  else(USE_MPI)
    set(HDF5_PREFER_PARALLEL OFF)
    message(STATUS "outside changing HDF5 to use serial: ${HDF5_PREFER_PARALLEL}")
  endif(USE_MPI)
  find_package(HDF5 REQUIRED)
else(USE_HDF5)
  set(HDF5_FOUND 0)
endif(USE_HDF5)

if (HDF5_FOUND)
  message(STATUS "Found HDF5:")
  message(STATUS "    headers: ${HDF5_C_INCLUDE_DIRS}")
  message(STATUS "    definitions: ${HDF5_C_DEFINITIONS}")
  message(STATUS "    libs:    ${HDF5_C_LIBRARIES}")
  add_definitions(${HDF5_C_DEFINITIONS})
  include_directories(${HDF5_C_INCLUDE_DIRS})
  set(EXTRA_LIBS ${EXTRA_LIBS} ${HDF5_C_LIBRARIES})
  set(HDF5_DEFINE "#define USE_HDF5")
else (HDF5_FOUND)
  set(HDF5_DEFINE "")
  unset(HDF5_C_INCLUDE_DIRS CACHE)
  unset(HDF5_C_COMPILER_EXECUTABLE CACHE)
  unset(HDF5_C_LIBRARY_hdf5 CACHE)
endif (HDF5_FOUND)
